name: NVIDIA Alchemi Materials Workflow

on:
  push:
    branches: [ main ]
    paths:
      - 'data/smiles/**'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      smiles_file:
        description: 'Path to SMILES file to process'
        required: true
        default: 'data/smiles/molecules.txt'
      batch_size:
        description: 'Batch size for processing'
        required: false
        default: '10'
      calc_type:
        description: 'Calculation type (dft or md)'
        required: false
        default: 'dft'

jobs:
  submit-calculations:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install rdkit ase numpy duckdb requests warp-lang
          
      - name: Determine SMILES file
        id: get-smiles
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "SMILES_FILE=${{ github.event.inputs.smiles_file }}" >> $GITHUB_ENV
            echo "BATCH_SIZE=${{ github.event.inputs.batch_size }}" >> $GITHUB_ENV
            echo "CALC_TYPE=${{ github.event.inputs.calc_type }}" >> $GITHUB_ENV
          else
            # Find the most recently modified SMILES file
            LATEST_FILE=$(find data/smiles -type f -name "*.txt" -printf "%T@ %p\n" | sort -nr | head -1 | cut -d' ' -f2-)
            echo "SMILES_FILE=${LATEST_FILE:-data/smiles/molecules.txt}" >> $GITHUB_ENV
            echo "BATCH_SIZE=10" >> $GITHUB_ENV
            echo "CALC_TYPE=dft" >> $GITHUB_ENV
          fi
      
      - name: Submit calculations
        env:
          NVIDIA_API_KEY: ${{ secrets.NVIDIA_API_KEY }}
        run: |
          python workflow/run_alchemi_workflow.py --smiles "$SMILES_FILE" --batch-size "$BATCH_SIZE" --calc-type "$CALC_TYPE"
      
      - name: Upload pending jobs info
        uses: actions/upload-artifact@v3
        with:
          name: pending-jobs
          path: |
            results/pending_jobs.json
            results/*_submit.json
          
  monitor-results:
    needs: submit-calculations
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install rdkit ase numpy duckdb requests
          
      - name: Download pending jobs info
        uses: actions/download-artifact@v3
        with:
          name: pending-jobs
          path: results/
      
      - name: Download existing database if exists
        continue-on-error: true
        uses: actions/download-artifact@v3
        with:
          name: materials-db
          path: ./
      
      - name: Check for results
        env:
          NVIDIA_API_KEY: ${{ secrets.NVIDIA_API_KEY }}
        run: |
          python workflow/process_results.py
          
      - name: Upload updated database
        uses: actions/upload-artifact@v3
        with:
          name: materials-db
          path: data.duckdb
          
      - name: Upload results
        uses: actions/upload-artifact@v3
        with:
          name: calculation-results
          path: results/*.json
          
  scheduled-checks:
    runs-on: ubuntu-latest
    needs: monitor-results
    # Run every 30 minutes
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install rdkit ase numpy duckdb requests
          
      - name: Download pending jobs info
        uses: actions/download-artifact@v3
        with:
          name: pending-jobs
          path: results/
          
      - name: Download existing database
        uses: actions/download-artifact@v3
        with:
          name: materials-db
          path: ./
      
      - name: Check for new results
        env:
          NVIDIA_API_KEY: ${{ secrets.NVIDIA_API_KEY }}
        run: |
          python workflow/process_results.py
          
      - name: Upload updated database
        uses: actions/upload-artifact@v3
        with:
          name: materials-db
          path: data.duckdb
          
      - name: Upload new results
        uses: actions/upload-artifact@v3
        with:
          name: calculation-results
          path: results/*.json
